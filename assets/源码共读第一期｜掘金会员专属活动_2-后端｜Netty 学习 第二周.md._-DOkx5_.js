import{_ as e,c as t,o as a,X as o}from"./chunks/framework.a0KWhRid.js";const b=JSON.parse('{"title":"后端｜Netty 学习 第二周","description":"","frontmatter":{},"headers":[],"relativePath":"源码共读第一期｜掘金会员专属活动/2-后端｜Netty 学习 第二周.md","filePath":"源码共读第一期｜掘金会员专属活动/2-后端｜Netty 学习 第二周.md","lastUpdated":1729754194000}'),r={name:"源码共读第一期｜掘金会员专属活动/2-后端｜Netty 学习 第二周.md"},n=o('<h1 id="后端-netty-学习-第二周" tabindex="-1">后端｜Netty 学习 第二周 <a class="header-anchor" href="#后端-netty-学习-第二周" aria-label="Permalink to &quot;后端｜Netty 学习 第二周&quot;">​</a></h1><h3 id="本章任务提供" tabindex="-1">本章任务提供 <a class="header-anchor" href="#本章任务提供" aria-label="Permalink to &quot;本章任务提供&quot;">​</a></h3><p><a href="https://juejin.cn/user/430664257374270" title="https://juejin.cn/user/430664257374270" target="_blank" rel="noreferrer">挖坑的张师傅</a></p><h3 id="领读员说" tabindex="-1">领读员说 <a class="header-anchor" href="#领读员说" aria-label="Permalink to &quot;领读员说&quot;">​</a></h3><blockquote><p>大家好，我是张师傅。为了能帮助到更多对源码感兴趣、想学会看源码、提升自己后端技术能力的同学。组织了大家一起学习源码共读活动。</p><p>我对各个中间件源码非常感兴趣，过去一段时间阅读了 MySQL、JVM、Nginx、Netty、Spring、Linux 内核相关的源码，也写过很多关于根据源码来定位问题的文章，详见我的掘金博客 <a href="https://juejin.cn/user/430664257374270" title="https://juejin.cn/user/430664257374270" target="_blank" rel="noreferrer">juejin.cn/user/430664…</a></p><p>对于 Java 后端的同学，Netty 的源码是非常经典的学习资料，它不仅包含了丰富的网络编程相关的知识，还在代码中展示了很多 Java 编程的高级技巧，是我们深入学习网络编程、理解事件驱动、高性能编程不可多得的经典。</p></blockquote><h2 id="任务说明" tabindex="-1">任务说明 <a class="header-anchor" href="#任务说明" aria-label="Permalink to &quot;任务说明&quot;">​</a></h2><p>后端任务在整个源码学习的过程中出现，和前端分离的子任务不同，本篇包含了多个学习任务，除了以学习任务为核心产出的笔记以外，在阅读源码的时候产出的其他笔记也可参与本次活动。</p><h2 id="学习任务" tabindex="-1">学习任务 <a class="header-anchor" href="#学习任务" aria-label="Permalink to &quot;学习任务&quot;">​</a></h2><p>阅读 NioEventLoopGroup 的代码</p><blockquote><p>任务：NioEventLoopGroup 默认的构造函数会起多少线程，可以通过什么方式修改？这些线程的职责是什么</p></blockquote><p>早期 Java 版本 NIO 存在严重的 epoll 空轮询 bug，请查询相关的文章。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c611f49bfd74c03b707a844fc93cc8d~tplv-k3u1fbpfcp-jj-mark:1512:0:0:0:q75.awebp" alt="image.png"></p><blockquote><p>任务 : 阅读 NioEventLoop.java 的代码，尝试分析 Netty 是如何解决 JDK 中的 epoll 空轮询 BUG 的？</p></blockquote><p>Netty 内部有一个核心的类 ByteToMessageDecoder，它定义了两个累加器 MERGE_CUMULATOR、COMPOSITE_CUMULATOR</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e27f06cdb60a42f19d58cc3a098ff63c~tplv-k3u1fbpfcp-jj-mark:1512:0:0:0:q75.awebp" alt="image.png"></p><blockquote><p>任务 1：分析这两个累加器有什么不同</p></blockquote><blockquote><p>任务2：写一个 LengthFieldBasedFrameDecoder 定长编码的消息拆包类，实现如下格式消息的解码，并按逗号拼接</p></blockquote><table><thead><tr><th>Length</th><th>Content</th></tr></thead><tbody><tr><td>4 字节</td><td>变长</td></tr></tbody></table><h3 id="额外任务-零拷贝知识" tabindex="-1">额外任务：零拷贝知识 <a class="header-anchor" href="#额外任务-零拷贝知识" aria-label="Permalink to &quot;额外任务：零拷贝知识&quot;">​</a></h3><ol><li>任务 1：了解什么是零拷贝，C/C++中如何实现零拷贝</li><li>任务 2：Java 中如何实现零拷贝</li><li>任务 3：netty 是如何实现零拷贝的</li></ol><p><a href="https://juejin.cn/book/7169108142868365349/section/7171463783146061862" target="_blank" rel="noreferrer">原文地址</a></p>',21),p=[n];function l(c,i,h,s,d,u){return a(),t("div",null,p)}const f=e(r,[["render",l]]);export{b as __pageData,f as default};
